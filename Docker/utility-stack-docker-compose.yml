version: '3'
name: retro-core-stack
services:
  redis:
    image: redis:6.0
    container_name: redis
    expose:
      - ${REDIS_PORT} # expose the port to other services wont be available outside the network
    command: [ "redis-server", "--requirepass", "${REDIS_PASSWORD}" ]
    restart: unless-stopped
    networks:
      - retro-main
  zookeeper:
    image: zookeeper:3.8
    container_name: zookeeper
    expose:
      - ${ZOOKEEPER_CLIENT_PORT}
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-network
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    expose:
      - ${KAFKA_PORT}
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:${ZOOKEEPER_CLIENT_PORT}'
      KAFKA_INTER_BROKER_LISTENER_NAME: CLIENT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CLIENT:PLAINTEXT
      KAFKA_LISTENERS: CLIENT://:${KAFKA_PORT}
      KAFKA_ADVERTISED_LISTENERS: CLIENT://kafka:${KAFKA_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    restart: on-failure:1
    networks:
      - kafka-network
  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    # ports:
    #   - "${LOCAL_HOST_IP}:${KAFDROP_PORT}:${KAFDROP_PORT}"
    expose:
      - ${KAFDROP_PORT}
    environment:
      KAFKA_BROKERCONNECT: kafka:${KAFKA_PORT}
      JVM_OPTS: "-Xms32M -Xmx64M"
    depends_on:
      - kafka
    networks:
      - kafka-network
  tempo:
    image: grafana/tempo
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    command: [ "-config.file=/etc/tempo.yaml" ]
    container_name: tempo
    volumes:
      - ./docker/tempo/tempo-local.yaml:/etc/tempo.yaml:ro
      - ./tempo-data:/tmp/tempo
    expose:
      - ${JAEGER_PORT}
      - ${ZIPKIN_PORT}
    networks:
      - retro-main
  loki:
    image: grafana/loki
    container_name: loki
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    expose: # loki needs to be exposed so it receives logs
      - ${LOKI_PORT}
    environment:
      - JAEGER_AGENT_HOST=tempo
      - JAEGER_ENDPOINT=http://tempo:${JAEGER_PORT}/api/traces # send traces to Tempo
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
    networks:
      - retro-main
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    expose:
      - ${PROMETHEUS_PORT}
    networks:
      - retro-main
  grafana:
    image: grafana/grafana
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    container_name: grafana
    volumes:
      - ./docker/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./docker/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    expose:
      - ${GRAFANA_PORT}
    networks:
      - retro-main
  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.14.1
  #   container_name: es
  #   environment:
  #     - discovery.type=single-node
  #     - xpack.security.enabled=false
  #     - xpack.license.self_generated.type=trial
  #   ports:
  #     - "9200:9200"
  #   networks:
  #     - elastic-net
  #   volumes:
  #     - esdata:/usr/share/elasticsearch/data
  # kibana:
  #   image: docker.elastic.co/kibana/kibana:8.14.1
  #   container_name: kib
  #   ports:
  #     - "5601:5601"
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
  #     - xpack.security.enabled=false
  #   depends_on:
  #     - elasticsearch
  #   networks:
  #     - elastic-net
  mysql:
    image: mysql:latest
    container_name: mysql
    networks:
      - retro-main
    environment:
      # TZ: Asia/Kolkata
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    expose:
      - ${MYSQL_PORT}
    restart: unless-stopped
    volumes:
      - ./init:/docker-entrypoint-initdb.d
      - ./db_data:/var/lib/mysql
networks:
  kafka-network:
    external: true
    driver: bridge
  # elastic-net:
  #   driver: bridge
  retro-main:
    external: true

# volumes:
#   esdata:
#     driver: local
